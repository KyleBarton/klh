* Design
#+attr_html: :width 1000px
#+attr_latex: :width 1000px
#+attr_html: :height 1000px
#+attr_latex: :height 1000px
[[./assets/high_level_design.jpg]]

* Journal
** 05/30/2022
Created "event" struct, instead of the clunkier "SessionInput", which
was always supposed to be a sort of placeholder anyway. Updated the
test client, and created a basic way to issue a command that's
basically an echo.

I also added a design image for documentation, see above.

I think from here it's best to drive the API from a plugin's
perspective. I think we should start with `Buffer` and `Diagnostics`,
which should be easy to get started and also both will be needed. The
Command issuance that I've included in this basic Event implementation
should be destined for the `Diagnostics` plugin, once that's
implemented.

Starting this will also force you to start thinking about listener
registration, authentication, & priority

** 06/02/2022
I've added a core module called `plugin` which contains a plugin
registrar, a plugin listener type, and a plugin trait for
extensibility. It's probably time to try to incorporate it into
session & dispatch. Then I should create a diagnostics plugin to
verify that the whole thing works as expected. Code is getting pretty
messy (albeit still pretty modular), so a cleanup would probably be
warrented soon:
- Use Result and Option return types appropriately to handle errors
- Make sure Async is working through the system
- Generally, just make dispatch better? Idk, it's driving me a little
  crazy at the moment. This might get fixed as I address the above.

** 06/04/2022
Significantly more refactoring as I try to make the Plugin trait work
for an actual instance (Diagnostics). I'm running into the issue of
how to actually "start" a plugin on listening for events. First, async
functions aren't allowed in traits, so that will limit a plugin impl's
ability to control that async multithreading. It's all probably not
the plugin's job to do it anyway. I've got two responsbilities that I
need to decouple from each other:

- An async listener/receiver for the plugin. This is common
  functionality and need not be a trait
- A trait with an "accept event" interface that actually does the
  plugin-specific logic


These two concerns are baked into the same object right now, and they
shouldn't be. Future work should be to pull them out.

Hopefully, this is the last major change that will be needed before I
have it working end to end. At that point, a bunch of this code needs
to be really cleaned up!

** 06/06/2022

I'm realizing that I may not have my local git config working
properly. Changing that now, and testing with a commit.

** 06/19/2022

Nice refactor here where PluginChannel handles all the async stuff,
while Plugin just handles the events synchronously. However, I'm
running into issues where I'm not matching events when I send them
through the client. That's likely because I've made the event
structure too complicated for the equality that I'm trying to
achieve. I could potentially use an "event Id" to do all the matching,
or I could override equality on the event.

Ok, I've solved for matching events by just overriding Eq and
Hash. However, I now need to figure out how to actually start the
plugin channel. Doing so inside session seems to be problematic.

** 07/16/2022
We've made it to bad async behavior!

Code runs without error, but plugin events are /sometimes/ routed, but
often they are dropped on the floor. Sometimes, it doesn't seem like
the sender is even sending them. I need to debug through the various
tokio threads I've spawned, but memory management is working correctly
at this point, so that's a win!

Definitely due for a larger refactor.

An example of what a "correct" output looks like:

#+BEGIN_SRC sh
Plugins started. Starting session
Starting plugins
Registering event Command { id: "diagnostics::log_event", data: CommandData { docs: "Sends a message to Diagnostics plugin" } }
Session started
Starting plugin!
Trying to find event Command { id: "diagnostics::log_event", data: CommandData { docs: "This is the details of my log event" } }
Registrar found the event. Forwarding to plugin
Received event for plugin on the PluginChannel: Command { id: "diagnostics::log_event", data: CommandData { docs: "This is the details of my log event" } }
Diagnostics received event Command { id: "diagnostics::log_event", data: CommandData { docs: "This is the details of my log event" } }
Trying to find event Command { id: "simple_message", data: CommandData { docs: "This message has been sent" } }
Could not find a plugin for this event: Command { id: "simple_message", data: CommandData { docs: "This message has been sent" } }
#+END_SRC

Note that the `match`ing on the diagnostics plugin isn't working
either, but that's a different (and well-encapsulated) problem to
solve.

** 07/17/2022
Most useful stacktrace so far:

#+BEGIN_SRC sh
Plugins started. Starting session
Starting plugins
Registering event Command { id: "diagnostics::log_event", data: CommandData { docs: "Sends a message to Diagnostics plugin" } }
Session started
Starting plugin!
Trying to find event Command { id: "diagnostics::log_event", data: CommandData { docs: "This is the details of my log event" } }
Registrar found the event. Forwarding to plugin
Trying to find event Command { id: "simple_message", data: CommandData { docs: "This message has been sent" } }
Could not find a plugin for this event: Command { id: "simple_message", data: CommandData { docs: "This message has been sent" } }
thread 'Trying to find event Command { id: "diagnostics::log_event", data: CommandData { docs: "This is the details of my second log event" } }
Registrar found the event. Forwarding to plugin
tokio-runtime-worker' panicked at 'called `Result::unwrap()` on an `Err` value: SendError(Command { id: "diagnostics::log_event", data: CommandData { docs: "This is the details of my log event" } })', /Users/kylebarton/Source/Personal/klh/klh_core/src/plugin.rs:115:52
thread 'tokio-runtime-worker' panicked at 'called `Result::unwrap()` on an `Err` value: SendError(Command { id: "diagnostics::log_event", data: CommandData { docs: "This is the details of my second log event" } })', /Users/kylebarton/Source/Personal/klh/klh_core/src/plugin.rs:115:52
stack backtrace:
   0: rust_begin_unwind
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/panicking.rs:143:14
   2: core::result::unwrap_failed
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/result.rs:1749:5
   3: core::result::Result<T,E>::unwrap
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/result.rs:1065:23
   4: klh_core::plugin::PluginRegistrar::send_to_plugin::{{closure}}
             at ./klh_core/src/plugin.rs:115:2
   5: <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/future/mod.rs:84:19
   6: klh_core::dispatch::Dispatch::dispatch_to_plugin::{{closure}}
             at ./klh_core/src/dispatch.rs:73:48
   7: <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/future/mod.rs:84:19
   8: klh_core::dispatch::Dispatcher::start_listener::{{closure}}::{{closure}}
             at ./klh_core/src/dispatch.rs:99:49
   9: <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/future/mod.rs:84:19
  10: tokio::runtime::task::core::CoreStage<T>::poll::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/core.rs:243:17
  11: tokio::loom::std::unsafe_cell::UnsafeCell<T>::with_mut
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/loom/std/unsafe_cell.rs:14:9
  12: tokio::runtime::task::core::CoreStage<T>::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/core.rs:233:13
  13: tokio::runtime::task::harness::poll_future::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:427:23
  14: <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/panic/unwind_safe.rs:271:9
  15: std::panicking::try::do_call
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:492:40
  16: ___rust_try
  17: std::panicking::try
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:456:19
  18: std::panic::catch_unwind
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panic.rs:137:14
  19: tokio::runtime::task::harness::poll_future
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:414:19
  20: tokio::runtime::task::harness::Harness<T,S>::poll_inner
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:89:9
  21: tokio::runtime::task::harness::Harness<T,S>::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:59:15
  22: tokio::runtime::task::raw::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/raw.rs:104:5
  23: tokio::runtime::task::raw::RawTask::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/raw.rs:66:18
  24: tokio::runtime::task::Notified<S>::run
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/mod.rs:171:9
  25: tokio::runtime::thread_pool::worker::Context::run_task::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/thread_pool/worker.rs:370:21
  26: tokio::coop::with_budget::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/coop.rs:106:9
  27: std::thread::local::LocalKey<T>::try_with
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/thread/local.rs:413:16
  28: std::thread::local::LocalKey<T>::with
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/thread/local.rs:389:9
  29: tokio::coop::with_budget
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/coop.rs:99:5
  30: tokio::coop::budget
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/coop.rs:76:5
  31: tokio::runtime::thread_pool::worker::Context::run_task
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/thread_pool/worker.rs:348:9
  32: tokio::runtime::thread_pool::worker::Context::run
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/thread_pool/worker.rs:318:24
  33: tokio::runtime::thread_pool::worker::run::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/thread_pool/worker.rs:303:17
  34: tokio::macros::scoped_tls::ScopedKey<T>::set
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/macros/scoped_tls.rs:61:9
  35: tokio::runtime::thread_pool::worker::run
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/thread_pool/worker.rs:300:5
  36: tokio::runtime::thread_pool::worker::Launch::launch::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/thread_pool/worker.rs:279:45
  37: <tokio::runtime::blocking::task::BlockingTask<T> as core::future::future::Future>::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/blocking/task.rs:42:21
  38: tokio::runtime::task::core::CoreStage<T>::poll::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/core.rs:243:17
  39: tokio::loom::std::unsafe_cell::UnsafeCell<T>::with_mut
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/loom/std/unsafe_cell.rs:14:9
  40: tokio::runtime::task::core::CoreStage<T>::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/core.rs:233:13
  41: tokio::runtime::task::harness::poll_future::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:427:23
  42: <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/panic/unwind_safe.rs:271:9
  43: std::panicking::try::do_call
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:492:40
  44: ___rust_try
  45: std::panicking::try
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:456:19
  46: std::panic::catch_unwind
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panic.rs:137:14
  47: tokio::runtime::task::harness::poll_future
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:414:19
  48: tokio::runtime::task::harness::Harness<T,S>::poll_inner
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:89:9
  49: tokio::runtime::task::harness::Harness<T,S>::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:59:15
  50: tokio::runtime::task::raw::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/raw.rs:104:5
  51: tokio::runtime::task::raw::RawTask::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/raw.rs:66:18
  52: tokio::runtime::task::Notified<S>::run
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/mod.rs:171:9
  53: tokio::runtime::blocking::pool::Inner::run
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/blocking/pool.rs:265:17
  54: tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/blocking/pool.rs:245:17
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
stack backtrace:
   0: rust_begin_unwind
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/panicking.rs:143:14
   2: core::result::unwrap_failed
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/result.rs:1749:5
   3: core::result::Result<T,E>::unwrap
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/result.rs:1065:23
   4: klh_core::plugin::PluginRegistrar::send_to_plugin::{{closure}}
             at ./klh_core/src/plugin.rs:115:2
   5: <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/future/mod.rs:84:19
   6: klh_core::dispatch::Dispatch::dispatch_to_plugin::{{closure}}
             at ./klh_core/src/dispatch.rs:73:48
   7: <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/future/mod.rs:84:19
   8: klh_core::dispatch::Dispatcher::start_listener::{{closure}}::{{closure}}
             at ./klh_core/src/dispatch.rs:99:49
   9: <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/future/mod.rs:84:19
  10: tokio::runtime::task::core::CoreStage<T>::poll::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/core.rs:243:17
  11: tokio::loom::std::unsafe_cell::UnsafeCell<T>::with_mut
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/loom/std/unsafe_cell.rs:14:9
  12: tokio::runtime::task::core::CoreStage<T>::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/core.rs:233:13
  13: tokio::runtime::task::harness::poll_future::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:427:23
  14: <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/panic/unwind_safe.rs:271:9
  15: std::panicking::try::do_call
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:492:40
  16: ___rust_try
  17: std::panicking::try
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:456:19
  18: std::panic::catch_unwind
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panic.rs:137:14
  19: tokio::runtime::task::harness::poll_future
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:414:19
  20: tokio::runtime::task::harness::Harness<T,S>::poll_inner
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:89:9
  21: tokio::runtime::task::harness::Harness<T,S>::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:59:15
  22: tokio::runtime::task::raw::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/raw.rs:104:5
  23: tokio::runtime::task::raw::RawTask::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/raw.rs:66:18
  24: tokio::runtime::task::Notified<S>::run
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/mod.rs:171:9
  25: tokio::runtime::thread_pool::worker::Context::run_task::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/thread_pool/worker.rs:349:13
  26: tokio::coop::with_budget::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/coop.rs:106:9
  27: std::thread::local::LocalKey<T>::try_with
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/thread/local.rs:413:16
  28: std::thread::local::LocalKey<T>::with
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/thread/local.rs:389:9
  29: tokio::coop::with_budget
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/coop.rs:99:5
  30: tokio::coop::budget
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/coop.rs:76:5
  31: tokio::runtime::thread_pool::worker::Context::run_task
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/thread_pool/worker.rs:348:9
  32: tokio::runtime::thread_pool::worker::Context::run
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/thread_pool/worker.rs:325:24
  33: tokio::runtime::thread_pool::worker::run::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/thread_pool/worker.rs:303:17
  34: tokio::macros::scoped_tls::ScopedKey<T>::set
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/macros/scoped_tls.rs:61:9
  35: tokio::runtime::thread_pool::worker::run
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/thread_pool/worker.rs:300:5
  36: tokio::runtime::thread_pool::worker::Launch::launch::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/thread_pool/worker.rs:279:45
  37: <tokio::runtime::blocking::task::BlockingTask<T> as core::future::future::Future>::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/blocking/task.rs:42:21
  38: tokio::runtime::task::core::CoreStage<T>::poll::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/core.rs:243:17
  39: tokio::loom::std::unsafe_cell::UnsafeCell<T>::with_mut
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/loom/std/unsafe_cell.rs:14:9
  40: tokio::runtime::task::core::CoreStage<T>::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/core.rs:233:13
  41: tokio::runtime::task::harness::poll_future::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:427:23
  42: <core::panic::unwind_safe::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/core/src/panic/unwind_safe.rs:271:9
  43: std::panicking::try::do_call
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:492:40
  44: ___rust_try
  45: std::panicking::try
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panicking.rs:456:19
  46: std::panic::catch_unwind
             at /rustc/7737e0b5c4103216d6fd8cf941b7ab9bdbaace7c/library/std/src/panic.rs:137:14
  47: tokio::runtime::task::harness::poll_future
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:414:19
  48: tokio::runtime::task::harness::Harness<T,S>::poll_inner
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:89:9
  49: tokio::runtime::task::harness::Harness<T,S>::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/harness.rs:59:15
  50: tokio::runtime::task::raw::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/raw.rs:104:5
  51: tokio::runtime::task::raw::RawTask::poll
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/raw.rs:66:18
  52: tokio::runtime::task::Notified<S>::run
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/task/mod.rs:171:9
  53: tokio::runtime::blocking::pool::Inner::run
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/blocking/pool.rs:265:17
  54: tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}}
             at /Users/kylebarton/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-1.7.1/src/runtime/blocking/pool.rs:245:17
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
#+END_SRC

** 07/30/2022
I've realized I can ignore this problem entirely for now. KLH is meant
to run as a REPL, and with today's change, I can show that as long as
input is being prompted for, we're good to go. Even better, I added a
"slow bomb" in the diagnostics plugin that shows that plugins don't
block the main thread while they are working on something
computational. End-to-end testing here is pretty rough, but forms a
great basis for what we're trying to accomplish with this async
stuff. I think it's probably time to add the beginnings of a buffer
plugin (yay!) and then opt for some code cleanup.

** 08/05/2022
I've gotten two plugins up and running (!!) with the addition of
`buffer`. This proves out the fact that the asynchronous approach here
will work - the slow bomb on `diagnostics` does not block `buffer`
commands.

However, it's time to really nail down queries. Commands are in an
"ok" state (they still need a better "data" serialization approach),
but the query has the unique need to asynchronously respond.

The next few commits should be dedicated to clearing this up.

** 08/06/2022
I've officially run into the limits of my current event structure. At
the crux of the problem: the /type/ of the event and the /data/ of the
event are wrapped into one enum. They need to be separated, which is
work I've started:

`EventType` should define the type of the event, and can probably
remain an enum. It is this that will be used to register with the
plugin registrar, and for equality matching.

`Event`, or `EventMessage`, or `Message` (naming TBD) should define
the actual data being dispatched through the klh session. It has an
`EventType` for equality matching, but it contains more data (for
instance, a responder for queries). This object need not implement
`Clone` like `EventType`, as it should be borrowed, not replicated.
** 08/07/2022
Migration completed, we now have a more complex event environment:

Queries: Own handling logic needed for queries
Command: Have "Content" for specifying the command.

Both /have/ event types (enum with an underlying id in bytes)

Both /produce/ event messages, which are built to carry the data off
to where they should in the async brokerage. Right now, event messages
can only be produced by the command or query once, and the messages
themselves can only be sent & handled once. A way to repeat the
message may be needed later, but for now this is an ok rule to
follow. Since the way we "burn" these messages is with options, we
could potentialy extend a more passive "broadcast"-style event that
just keeps empty options for all the one-time use stuff. This can all
be figured out later.

At this point, serious refactoring and testing is needed. The codebase
has grown significantly, and keeping a bunch of rust structs in one
file has really started to cause pain. Additionally, there's no great
testing, and everything is verified E2E. Fine for the early days, but
at this point, I need to start making the needed tests because I'm
getting into more concrete and less conceptual territory.


** 08/08/2022
I think I've found a pattern for submodules that's going to work well
for me. Essentially, I won't expose any submodules, and will just use
`pub use` in order to bring the public interfaces up into the module's
namespace. The submodules within the folder will therefore be private,
for the `mod.rs` to manipulate as needed to expose publicly.

**IDEA**
Consider adding an "opened" property to EventMessage. A message is
then either opened or unopened, and that can dictate whether the data
can be read (using options). Open once, read once.

** 08/20/2022

I think I've been thinking of my request refactoring wrong. In
particular, I don't need to create a Request /from/ an event
message. Rather, the handling code should be able to reason about an
event message exclusively. The `Request` abstraction should be simply
for the sender's ease. Whether handling code is shared within a plugin
is up to the plugin's implementation. /Take Request out of the
handling code/.

**UPDATE** It's deeper than this. I need to start over, I've turned
myself in circles. I need to separate out a couple of concepts:

Request: A customizable way to configure an event message

Response: A customizable way to deserialize an event message, and
handle the proper things.

My initial work here just mixed those two up. `Command` and `Query`
don't seem to matter too much here, as I do more of this. I think we
may want a way to Broadcast later, so it would be good to ensure that
Request/EventMessage/Response can handle such a scenario, but those
might be the only three types I really need to send around.

Ok, step back: event message content needs a better type than
"string". Get that decoupled a bit more, and then use that for
request.

Argh, still getting mixed up. Some new thoughts:
- `Query` more or less implements the Request that I'm looking for. No need to make this a trait. It just needs to a) serialize to an event message, b) provide some handling code for responses, c) provide content for the event message if needed. Really, `Command` looks like an inferior interface by comparison. So maybe try this:
*** DONE Rewrite your commands as queries (don't change event types)
CLOSED: [2022-08-26 Fri 16:30]
*** DONE Rename `Query` to `Request`
CLOSED: [2022-08-26 Fri 16:30]
*** DONE Let the plugins provide their own `Request` (nee Query) objects via a public interface.
CLOSED: [2022-08-26 Fri 16:30]

** 08/26/2022
Lots of improvements made:

- Universal Request object, instead of commands and queries - those are just used in the terminology of EventType.
- Content is now extensible, however I have to take a dependency on
  serde's Serialize/Deserialize. Probably ok, but I would love to wrap
  the serde usage entirely at some point. Using bson under the hood.
- Basic client interface is simplified a TON!


It's probably time for some usability updates, before getting serious about response design:
*** DONE Add official logging and clean up excessive log messages. Don't go fully into debug logging yet.
CLOSED: [2022-08-28 Sun 11:54]
*** DONE Generally rename "Event" to "Message"
CLOSED: [2022-08-27 Sat 22:30]
Obviously this will make the naming of EventMessage interesting. The
concept of an event doesn't really make sense; they are messages,
which contain requests and solicit responses. An "event" may end up
being a type (or types) of message in the future.

EventType --> MessageType, and such
*** DONE Simplify the "awaitResponse" flow for requests into a fluent interface.
CLOSED: [2022-09-03 Sat 14:39]
Also, parameterize slow bomb and have diagnostics return responses, instead of just logging them.

*** DONE Reformat the +event+ message module
CLOSED: [2022-09-03 Sat 14:39]
a) it should messaging. b) we'll probably want to move consumer & producer, or request/response, code into different areas.

*** DONE Remove the `Query` concept in favor of Request
CLOSED: [2022-08-27 Sat 22:40]
"Query" should only exist as a message type.
*** DONE Use structured content for the response side of things as well
CLOSED: [2022-08-28 Sun 10:35]
I believe this needs to happen before we can merge https://github.com/KyleBarton/klh/pull/4

** 09/03/2022
Starting on a larger refactor effort to get some documentation and coding standards and testing in place.

Phase 1:
- Go through and add tests
- Adjust function return values as you go
- Document testing & function signature standards
- Linting

Phase 2: 
- Move Core Plugins out of klh-core
- Add detailed readmes
- Research code coverage plugins for GH.

*** Initial E2E Tests done
It's probably time to decide if I really need `session` - it seems
like Klh and Session wrap the same thing. It might be better to
simplify into the KLH layer, and then develop a "set of option" object
that is passed in to KLH in order to determine common plugin
locations, logging setup, etc.
