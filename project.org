* Design
#+attr_html: :width 1000px
#+attr_latex: :width 1000px
#+attr_html: :height 1000px
#+attr_latex: :height 1000px
[[./assets/high_level_design.jpg]]

* Journal
** 05/30/2022
Created "event" struct, instead of the clunkier "SessionInput", which
was always supposed to be a sort of placeholder anyway. Updated the
test client, and created a basic way to issue a command that's
basically an echo.

I also added a design image for documentation, see above.

I think from here it's best to drive the API from a plugin's
perspective. I think we should start with `Buffer` and `Diagnostics`,
which should be easy to get started and also both will be needed. The
Command issuance that I've included in this basic Event implementation
should be destined for the `Diagnostics` plugin, once that's
implemented.

Starting this will also force you to start thinking about listener
registration, authentication, & priority

** 06/02/2022
I've added a core module called `plugin` which contains a plugin
registrar, a plugin listener type, and a plugin trait for
extensibility. It's probably time to try to incorporate it into
session & dispatch. Then I should create a diagnostics plugin to
verify that the whole thing works as expected. Code is getting pretty
messy (albeit still pretty modular), so a cleanup would probably be
warrented soon:
- Use Result and Option return types appropriately to handle errors
- Make sure Async is working through the system
- Generally, just make dispatch better? Idk, it's driving me a little
  crazy at the moment. This might get fixed as I address the above.

** 06/04/2022
Significantly more refactoring as I try to make the Plugin trait work
for an actual instance (Diagnostics). I'm running into the issue of
how to actually "start" a plugin on listening for events. First, async
functions aren't allowed in traits, so that will limit a plugin impl's
ability to control that async multithreading. It's all probably not
the plugin's job to do it anyway. I've got two responsbilities that I
need to decouple from each other:

- An async listener/receiver for the plugin. This is common
  functionality and need not be a trait
- A trait with an "accept event" interface that actually does the
  plugin-specific logic


These two concerns are baked into the same object right now, and they
shouldn't be. Future work should be to pull them out.

Hopefully, this is the last major change that will be needed before I
have it working end to end. At that point, a bunch of this code needs
to be really cleaned up!

** 06/06/2022

I'm realizing that I may not have my local git config working
properly. Changing that now, and testing with a commit.

** 06/19/2022

Nice refactor here where PluginChannel handles all the async stuff,
while Plugin just handles the events synchronously. However, I'm
running into issues where I'm not matching events when I send them
through the client. That's likely because I've made the event
structure too complicated for the equality that I'm trying to
achieve. I could potentially use an "event Id" to do all the matching,
or I could override equality on the event.

Ok, I've solved for matching events by just overriding Eq and
Hash. However, I now need to figure out how to actually start the
plugin channel. Doing so inside session seems to be problematic.
