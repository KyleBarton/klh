* KLH
** General Notes
*** Initial notes
Copied from a txt file jotted down on day 1
**** Desired features
- Portability
- First-class lang support
- Fast
- Interoperable
- Extensible
**** What is a text editor?
***** Takes a string of text, manipulates, saves
- provides tools to manipulate the text quickly
- Provides tools allowing for searching of the text quickly
- provides tools for navigating the text quickly
- provides a clipboard, ideally an interoperable one
- provides an API for text annotations (can be used to build libs for underline/bold/italics, and also code highlights/tips/autofills/etc)
- provides an API to intercept user commands
- provides an API to apply text manipulation
- provides an API to access clipboard
- provides an API to search function
- provides an API to navigate text
***** Project commander
Functionality that we like when coding, but aren't really the job of the text editor. Things like:
- Semantic search/replace (rename, code references, etc)
- Refactor commands (extract method/class/parameter, inline, etc)
- File search 
  - Ideally, integrated into the code project context with proper ignores
- Terminal integration
- Build command/runner
- "Vim-y" commands:
  - Record macros
  - Repeat commands
  - autoformat
***** On portability
****** Rough Portability Requirements
******* Graphically:
- Useable on a standard unix terminal emulator
- Has a GUI that makes things pretty when available
- Think about mouse integration here then
******* Operating system:
- If it runs x86, it should be good to go
******* Configuration
- Goal would be 1 file/dir, 1 configuration. Drop & run wherever
  - Much like .emacs, but ideally no `emacs.d/`
- There are questions about language/framework installations, other dependencies
- Can a 1 file/dir, 1 configuration format be extensible? VsCode/emacs comes close
******* The project commander 
- this needs to be portable to really make this awesome
***** On Language support
- Talks to the Project commander API and the text editor text API to read
- Talks to the text editor Annotations API for autoprompt/tips/highlights/etc
- Talks to the text editor text API to make changes based on user-prompted refactor commands
  - AAAACTUALLY maybe talk to the refactor API via Project commander
- Interacts with the Project Commander API
- Interacts with the view?
  -  No. Let's let the project commander and/or text editor API interact with the view
***** On the view
- We need a terminal implementation of the API, and then a GUI implementation
- Should be a separate API, but is it open? This may be only for the text editor/project commander
  - This would be a knock against it compared to vim though
  - But also would probably keep the extensions community cleaner/easier to maintain
***** On state
- DB rather than files; sqlite?

**** Architecture
We need some visuals here
**** Technology
***** Idea1: Rust
****** Pros:
- Have been wanting to learn
- Lower level, definitely portable, probably fastest/most efficient usage of resources
- No need to malloc my way to death
****** Cons:
- Newer language, support may waver in coming years
- I don't know rust, so getting started will be slower
***** Idea2: Python
****** Pros:
- I know python well, no ramp-up time
- Easy support for list manipulation, will probably make for clean code
- Can be compiled down to an executable* (* need to verify this)
****** Cons:
- Could potentially take a lot of mem/be slower
- Not 100% sure it's portable
***** Idea3: Javascript
- Ok this isn't a real idea, BUT if we keep our interfaces tight, we could potentially create a web implementation of the view,
  and an http implementation of the text editor API, potentially creating a collaborative version
**** Name
- CTE -- Composable Text Editor
  - A little too brain-injury-y
- TEPC -- Text Editor, Project Commander
  - Awkward and a mouthful
- LELE -- Little Editor that Lives Everywhere
  - Call out to the portability, better be able to deliver on that promise
- RAW -- reader and writer
  - Too generic, there are a few "raw"s in crates.io
- For now, KLH
- Kyle's Little Helper
*** Misc
TODO these are messy thoughts and need to be organized better
- Thinking about command auditability and programmatic manipulation, we should
  have an "actionsTaken" buffer of some sort -- literally records every keystroke,
  could even be a true buffer to the command processor. When the user "opens" the
  buffer, maybe we do something special, like copy to a "command snapshot" or
  something... how else can you get the size of the buffer? the command itself
  would change the outcome .... This needs more thought. What if you wanted to
  pause & play commands to the buffer? What about programmatic access? Do we have
  a stdin/stdout buffer model? hmmmm
** Research
*** Resources to read
**** TODO The Craft of Text Editing, Craig Kinseth
The Craft of Text Editing, or Emacs for the Modern World: http://www.finseth.com/craft/
Craig A. Finseth
**** DONE The Emacs Tutorial
**** TODO The Design of Everyday Things, Donald Norman
**** TODO Rustbook
*** Notes during research
**** The Craft of Text Editing
- "Second, the mind has expectations: it sees (and in general senses) what it
  expects to see. In extreme cases, if something totally unexpected happens, it
  can take many seconds for the mind to even recognize that there is an
  unexpected image, in addition to the time required to process the image and
  make a decision. Thus, it is important for the program to anticipate what the
  mind will expect to see and to arrange the display accordingly."
  - One conclusion to draw from this: unexpected errors should be handled in a
    very consistent manner. Red text/exclamation points, whatever. Some signal
    to the user such that, while the signal is well-recognized, it tells the
    user something unrecognized happened, and they cannot be on autopilot/flow
    state any longer
- On extensibility:
  - late binding of names to procedures through indirect calls, dynamic linking, or other techniques
  - retaining and using the symbol table information at run time so that the user can think of changes in terms of names, not addresses
  - internal error and consistency checking under program control so that users can be protected from their mistakes
  - the ability to add code to the executing editor
- At a certain point, I have to abstract into a custum editor language:
  "3.2.11
  Custom Editor Languages No traditional language (except perhaps for Common
  Lisp) offers complete support for text editing. The solution, used by
  virtually every implementation of Emacs-type text editors, as well as many
  implementations of other editors, is the creation of a custom editor language.

  An existing language -- very often C -- is selected. This language is used to
  write an interpreter for the custom editor language. The interpreter manages
  memory, handles display refresh, and in general provides all of the necessary
  utility functions. The editor language is then used to write the logic of all
  the user-visible commands.

  As the editor language is implemented using an interpreter, the command set is
  readily extensible. Also, because the editor language is designed around text
  editing, it can offer excellent text-handling power.

  The division of the programming tasks into two components provides an
  excellent base for supporting large projects. And, since the interpreter is
  usually implemented in a language such as C, the interpreter can be quite
  efficient.

  For these reasons, custom editor languages are the preferred method for implementing text editors."
- On marks:
  "There are two types of marks. They differ only in how they behave in the case that an insertion is made at the location of the mark. Normal marks move with the insertion. Thus, the newly inserted character will be just before the mark. Fixed marks remain in place: the newly inserted character will be just after the mark. An example of the difference is in the case where a command is to identify the characters that are inserted. The command merely needs to create both a fixed and a normal mark at the same place. After the insertion, the two marks will bracket the new characters."

** Architecture
*** TODO Diagrams
*** Components
**** Buffer Editor
***** Summary
Program whose functions are of the form ~(Buffer, args) -> Buffer~, and are
stateless. The lone exception is for ~split_buffer~, which is of the form
~(Buffer, args) -> Vec<Buffer>~ It is the engine that drives the actual changing
of a piece of text.
:TODO_NOTE:
Need to look more closely at the API here. Should
this be a mutable reference? Or just try to use the &str API? Or role a more
involved struct at this level too?
:END:
***** Functions
****** =append_char=
Inserts the given Buffer with a given character at its point
****** =prepend_char=
Prepends the given Buffer with a given character
****** =insert_char_at_point=
Inserts a given character at a given location in the Buffer.
****** =pop_char=
Removes the last char of the Buffer
****** =cut_char=
Removes the first char of the Buffer
****** =split_buffer=
Splits a given buffer at a given point, returning a list of buffers as a
partition of the given buffer
****** =get_char_at_point=
Returns the char in the Buffer that matches the given index
****** =get_next_point_for_char=
Returns the next index in the Buffer that matches the given char
:TODO_NOTE:
We need to define "next" here -- how does state work?
:END:
**** Buffer Coordinator
***** Summary
Program whose functions are to receive commands from the =Command Interpreter= and
translate to changes to the buffers in the buffer store. To start, this can be
translating commands to the buffer editor
**** Buffer Store
***** Summary
Program who provisions and maintains buffers in memory. In charge of any
locking/race-condition management that will be necessary. Also in charge of
saving files.
**** Command Interpreter
***** Summary
Awaits data on a given input stream, and when received, translates them into
commands to the buffer coordinator
:REFACTOR:
This may need to be split into a Command listener and Command Interpreter(s)
subscribed to events
:END:

** Tasks
*** Features
**** DONE refactor into components
CLOSED: [2020-07-03 Fri 12:09]
**** TODO implement error handling strategy
**** DONE implement logging strategy
CLOSED: [2020-07-11 Sat 17:18]
**** DONE implement point
CLOSED: [2020-06-14 Sun 22:12]
**** DONE implement =buffer_editor=
CLOSED: [2020-07-07 Tue 22:53]
**** TODO implement testing strategy
**** DONE implement =buffer_store=
CLOSED: [2020-11-28 Sat 13:10]
**** TODO Handle more than one buffer
**** DONE implement =session=
CLOSED: [2020-07-08 Wed 22:28]
Basically, it's =world= from /Craft/, but I'd still like it to be more modular
**** TODO implement a better UI
Look at Iced: https://github.com/hecrj/iced
Ok, so Iced looks like a good option. Architecture:
- UI runs as an Application in its own thread
- It creates a subscription to a "sessionClient", which somehow receives input from the session
- It sends user updates through a channel to the session, which is listening on the other side
Should sessionClient then control both directions of changes? I think maybe so.
So:
- From main.rs, new-up a session
- From main.rs, new-up a session-client, injecting the session
- session-client news-up a UI application in its own thread, giving it:
  - One receiving channel, for which to subscribe
    - Some confusion here
    - UI _subscribes_ to session for updates -- does this need to be done with channels?
  - One transmitting channel, for which to send messages on update
STILL NEEDED (12/12/2020):
- Get modifier keys working
- Redisplay (subscription, channels)
**** TODO implement an echo area
Good for debugging, otherwise this is going to be slow going
*** Bugs/Cleanup
**** DONE arrow keys need to be handled
CLOSED: [2020-06-14 Sun 22:12]
Note that arrow keys send multiple characters to the screen -> <ESC>+A|B|C|D
**** TODO Cleanup access control across project
**** DONE restore the screen
CLOSED: [2020-06-14 Sun 22:12]
** 06/19/2021 - It's Time for a Rewrite
Ok, so you've taken your current implementation as far as it's going
to go. You've learned a ton of things along the way:
- How to read stdin literally, char-by-char
- A viable GUI library (Iced)
- Multi-threading using channels

That's great! These will likely all come in handy in the future
design. Unfortunately, learning all of these concepts meant
prototyping, and layering prototypes on prototypes has made the
current codebase a tightly-coupled monster:
- UI & core logic are mixed together
- A poorly-defined "session" abstraction is taking on more and more responsibility
- UI has to run on the main thread, which is making initialization logic messy

So, it's time to start from scratch. You need to sit down for 3+ hours
to do this properly, and it needs to happen after you get some initial
design down. Let's get a first draft of the design down now.
*** Goals of the new design
**** Decoupled
Clear separation of components is key. IO-related concerns in
particular need to stay away from the core design of the editor. A
"window" can keep a logical representation of what should be displayed
visually, but the mechanics of this are out of scope.
**** Testable
It's ok to spend some time on flyweight clients which can demonstrate
or test the editor. It's a good check in-and-of itself that the editor
can be integrated with once it is time to build a GUI.
**** Non-blocking
Asynchronous and multi-threaded processing is an absolute must,
because inputs will come from different places:
- The user
- An lsp server
- System updates from the editor itself
*** Components
**** Buffer
The basics of the current design are pretty good, and it's the one
part of the current implementation that has a pretty solid test suite
attached to it. This should be broken out into its own module. It can
stay as one rust file for now, but it really is a dedicated, and core
piece of logic, and it will likely expand.

There probably needs to be a subcomponent, *BufferMetadata* or
something of that ilk. This would contain, for instance,
subscriptions/publications to the buffer's file, if one exists.

Needs an *Editor* abstraction

Does *Buffer* handle the asynchronous interface? Or *BufferStore*? Or
a distinct abstraction? Nope, it's gotta be the *Session*.
**** BufferStore
We do still need a store of active buffers which can be managed.
The current design is a mess though, and little needs to be salvaged.
BufferStore needs to be its own complete module, and ideally keeps
a pretty abstract concept of buffers. Furthermore, file handling logic
should not be present here.
**** Window
A window is a logical unit of display. It has awareness of its own
size, *but not its position on the screen*. It contains data about the
content that it should be displaying (often, that will be the visual
portion of the buffer), as well as any actions-at-positions
(hyperlinking, auto-fill, etc). Most importantly, I want to make a key
design decision about buffers and windows: +*a window keeps its own+
+list of buffers*. This is distinct from the emacs approach of having a+
+single pool of buffers that can be displayed on various+
+windows. Instead, a window will have a ring of open buffers, and when+
+all buffers in the window are closed, the window will close. This+
+means that /windowA/ and /windowB/ might have buffers pointing at the+
+same file, which will cause some duplication in memory. Therefore it's+
+important that buffers stay cheap to produce and maintain. There also+
+needs to be first-class functionality around moving a buffer from one+
+window to another.++

Slight change. *A window keeps a list of pointers at active
buffers*. So, while buffers are not duplicated in the system, the
window is aware of which buffers it has opened. When all buffers to
which the window points have been closed, then the window disappears.
**** WindowManager
Maintains the positioning and management of the windows. Initiates
window resizing commands, and needs some way of telling *Window*
so that it can handle that. Has no concept of buffers.
**** FileHandler
There are a couple of ways to handle file descriptors. The *buffer*
could hold a reference to the file, or it could hold a pointer to the
FDs managed by FileHandler. I think keeping a centralized file
handler, perhaps running on its own thread, will allow multiple
processes to edit the file. On the other hand, perhaps *buffer* should
handle the async input, and act as an exclusive client to FileHandler.
If the latter strategy is taken... is it better to just let *buffer*
hold the reference?
**** Session
Central thread and front-door of the application. Contains the logic
necessary to "dispatch" commands and queries to their appropriate
plugins. Handles plugin registration and pub-sub logic as
well. Contains DAG validation to prevent looping events. Finally, some
special logic at bootstrap will exist to ensure that "required"
plugins are registered (primarily, display, and buffers)

***** Dispatch
Module that delegates commands & queries to specific plugins
****** EventHandler
mpsc-fronted task to process & delegate events
****** Plugins
List of mpsc-configured connectors to which events are sent. These are
abstract to their actual processing components, which could be simple
tasks, or full threads.
**** Event
The unit of communication of klh. Can be broadcast to multiple
plugins. Fundamentally, there are two types of events:
#+BEGIN_SRC
#[derive(Copy)]
enum Event {
  Command {
    Id: String,
    Data: impl CommandData,
  },
  Query {
    Id: String,
    PluginId: Sring,
    Responder: impl QueryResponder,
  },
}
#+END_SRC
***** Commands
Events that are meant to request mutation. They are fire & forget.
***** Queries
Events that are intended to retrieve a piece of information. They
should come with a one-shot responder to which the query will
respond. Queries have an associated PluginId, which is where the
dispatcher will send them. (TODO: can other plugins subscribe to
queries? Maybe as watchers only.  but that means we need to implement
an access control system for the QueryResponder).
**** Plugin:
A worker that manages a piece of logic for klh. Includes an
asynchronous "event handler" which handles subscribed events. Also
includes registration logic that dispatch can call in order to record
which events to send the plugin's way. There are a few required
plugins (for now):
- DisplayManager
- BufferManager
***** EventHandler
mpsc-fronted handler that takes subsribed events
**** Plugins
***** BufferManager
Handles all buffers and mutations of them. Additionally, handles files (maybe. For now).
***** DisplayManager
Handles all display logic that a GUI would need in order to represent
a session of KLH.
- Windows
- Frames
- Overlays
***** GUI
We'll get there
***** TestClient
Probably something I'll need to gin up just to test the system out.
** [Cynical] Why don't you build something useful?
This could perhaps be transformed into my terminal-free shell idea. It
would still work really well with the pub-sub design that the rewrite
is supposed to use. Commands from the cli could be mapped to "pages"
representing their output. Build as an API so that extensions can be
built via emacs & such.
